{"data":{"mdx":{"id":"e453baeb-1052-54a9-bd01-49839935f127","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In an ecosystem undergoing constant flux, what does it mean for an API to be modern? In this talk, I'll discuss the\nwork that's taken place over the last year to deliver modern JavaScript APIs to developers in the Electron project,\nand the obstacles we encountered along the way.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We'll discuss updates ranging from asynchronous JS to idiomatic getters and setters, as well as allowing developers\nto access new platform-dependent functionalities. Our APIs can and often are implemented across two or more languages\non their way to the end user, and so we'll walk through some examples of how to effectively gather context and write\nreusable code to make updating simpler.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You'll come away with a deeper understanding of how open source projects can more effectively balance innovation with\nmaintenance, as well as perspectives on how to appropriately consider end-users and their needs when modernization\naffects the code they use.`));\n  }\n\n}"},"frontmatter":{"name":"Shelley Vohr","title":"API Modernization: Building Bridges As You Cross Them","image":"shelley_vohr","color":"green","bio":"Shelley is a software engineer on the Electron team at GitHub who loves figuring out how to make things work. She's passionate about clean code & diving deep into tricky problems. She's also a runner, explorer, and crossword puzzle fan powered by more coffee than a human should probably drink.","from":"San Francisco, CA, USA","twitter":"codebytere","github":"codebytere","company":"GitHub","company_url":"https://github.com/","socialCard":"social_card_shelley.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e453baeb-1052-54a9-bd01-49839935f127"}}